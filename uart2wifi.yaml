substitutions:
  name: L3-Inv

esphome:
  name: uart2wifi
  friendly_name: uart2wifi

esp8266:
  board: d1_mini

external_components:
  - source:
      type: git
      url: https://github.com/maquowicz/esphome-pipsolar.git
      ref: pi18
    components: [pipsolar]

# Enable logging
logger:
  level: DEBUG
  #baud_rate: 0 # disable UART logs
  logs:
    component: ERROR

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Uart2Wifi Fallback Hotspot"
    password: !secret wifi_fallback_password

captive_portal:

uart:
    id: uart_ch1
    tx_pin: GPIO14
    rx_pin: GPIO12
    #tx_pin: GPIO1
    #rx_pin: GPIO3
    baud_rate: 2400
    # debug: # this fucker wipes out uart read buffer 
    #  direction: BOTH
    #  dummy_receiver: true
    #  after:
    #    delimiter: "\r"
    #  sequence:
    #    - lambda: UARTDebug::log_string(direction, bytes);

pipsolar:
  - uart_id: uart_ch1
    id: inverter0
    update_interval: 1000ms

sensor:
  - platform: pipsolar
    pipsolar_id: inverter0
    # P007PIRI
    #grid_rating_voltage:
    #  name: "${name} grid_rating_voltage"
    #grid_rating_current:
    #  name: "${name} grid_rating_current"
    #ac_output_rating_voltage:
    #  name: "${name} ac_output_rating_voltage"
    #ac_output_rating_frequency:
    #  name: "${name} ac_output_rating_frequency"
    #ac_output_rating_current:
    #  name: "${name} ac_output_rating_current"
    #ac_output_rating_apparent_power:
    #  name: "${name} ac_output_rating_apparent_power"
    #ac_output_rating_active_power:
    #  name: "${name} ac_output_rating_active_power"
    #battery_rating_voltage:
    #  name: "${name} battery_rating_voltage"
    battery_recharge_voltage:
      name: "${name} battery_recharge_voltage"
    battery_redischarge_voltage:
      name: "${name} battery_redischarge_voltage"
    battery_under_voltage:
      name: "${name} battery_under_voltage"
    battery_bulk_voltage:
      name: "${name} battery_bulk_voltage"
    battery_float_voltage:
      name: "${name} battery_float_voltage"
    battery_type:
      name: "${name} battery_type"
    battery_voltage:
      name: "${name} battery_voltage"
    battery_voltage_scc:
      name: "${name} battery_voltage_scc"
    # battery_voltage_scc2:
    #   name: "${name} battery_voltage_scc2"
    battery_discharge_current:
      name: "${name} battery_discharge_current"
    battery_charging_current:
      name: "${name} battery_charging_current"
    battery_capacity_percent:
      name: "${name} battery_capacity_percent"
    battery_power_direction:
      name: "${name} battery_power_direction"
      id: battery_power_direction_sensor
      internal: true
    current_max_ac_charging_current:
      name: "${name} Max AC Charging Current"
      id: current_max_ac_charging_current_sensor
    current_max_charging_current:
      name: "${name} Max Charging Current"
      id: current_max_charging_current_sensor

    input_voltage_range:
      name: "${name} input_voltage_range"
    output_source_priority:
      name: "${name} output_source_priority"
    charger_source_priority:
      name: "${name} charger_source_priority"
    #parallel_max_num:
    #  name: "${name} parallel_max_num"
    machine_type:
      name: "${name} machine_type"
    topology:
      name: "${name} topology"
    output_mode:
      name: "${name} output_mode"
    solar_power_priority:
      name: "${name} solar_power_priority"
    mppt_string:
      name: "${name} mppt_string"
    # P005GS
    grid_voltage:
      name: "${name} grid_voltage"
    grid_frequency:
      name: "${name} grid_frequency"
    ac_output_voltage:
      name: "${name} ac_output_voltage"
    ac_output_frequency:
      name: "${name} ac_output_frequency"
    ac_output_apparent_power:
      name: "${name} ac_output_apparent_power"
    ac_output_active_power:
      name: "${name} ac_output_active_power"
    output_load_percent:
      name: "${name} output_load_percent"
    inverter_heat_sink_temperature:
      name: "${name} inverter_heat_sink_temperature"
    mppt1_charger_temperature:
      name: "${name} mppt1_charger_temperature"
    # mppt2_charger_temperature:
    #   name: "${name} mppt2_charger_temperature"
    pv1_input_power:
      name: "${name} pv1_input_power"
    # pv2_input_power:
    #   name: "${name} pv2_input_power"
    pv1_input_voltage:
      name: "${name} pv1_input_voltage"
    # pv2_input_voltage:
    #   name: "${name} pv2_input_voltage"
    mppt1_charger_status:
      name: "${name} mppt1_charger_status"
    # mppt2_charger_status:
    #   name: "${name} mppt2_charger_status"

    dc_ac_power_direction:
      name: "${name} dc_ac_power_direction"
      id: dc_ac_power_direction_sensor
      internal: true
    line_power_direction:
      name: "${name} line_power_direction"
    fault_code:
      name: "${name} wfs fault_code"
    local_parallel_id:
      name: "${name} local_parallel_id"

    # P007PGS0
    total_ac_output_apparent_power:
      name: "${name} total_ac_output_apparent_power"
    total_ac_output_active_power:
      name: "${name} total_ac_output_active_power"
    total_output_load_percent:
      name: "${name} total_output_load_percent"
    total_battery_charging_current:
      name: "${name} total_battery_charging_current"

    total_generated_energy:
      name: "${name} total_generated_energy"

binary_sensor:
  - platform: pipsolar
    pipsolar_id: inverter0
    # P007GS
    setting_value_configuration_state:
      name: "${name} setting_value_configuration_state"
    load_connection:
      name: "${name} load_connection"
    # P007FLAG
    silence_buzzer_open_buzzer:
      name: "${name} flag silence_buzzer_open_buzzer"
    overload_bypass_function:
      name: "${name} flag overload_bypass_function"
    lcd_escape_to_default:
      name: "${name} flag lcd_escape_to_default"
    overload_restart_function:
      name: "${name} flag overload_restart_function"
    over_temperature_restart_function:
      name: "${name} flag over_temperature_restart_function"
    backlight_on:
      name: "${name} flag backlight_on"
    alarm_on_when_primary_source_interrupt:
      name: "${name} flag alarm_on_when_primary_source_interrupt"
    fault_code_record:
      name: "${name} flag fault_code_record"
    power_saving:
      name: "${name} flag power_saving"
    # P005FWS
    warning_line_fail:
      name: "${name} wfs warning_line_fail"
    warning_output_circuit_short:
      name: "${name} wfs warning_output_circuit_short"
    warning_over_temperature:
      name: "${name} wfs warning_over_temperature"
    warning_fan_lock:
      name: "${name} wfs warning_fan_lock"
    warning_battery_voltage_high:
      name: "${name} wfs warning_battery_voltage_high"
    warning_battery_low_alarm:
      name: "${name} wfs warning_battery_low_alarm"
    warning_battery_under_shutdown:
      name: "${name} wfs warning_battery_under_shutdown"
    warning_over_load:
      name: "${name} wfs warning_over_load"
    warning_eeprom_failed:
      name: "${name} wfs warning_eeprom_failed"
    warning_power_limit:
      name: "${name} wfs warning_power_limit"
    warning_pv1_voltage_high:
      name: "${name} wfs warning_pv1_voltage_high"
    #warning_pv2_voltage_high:
    #  name: "${name} wfs warning_pv2_voltage_high"
    warning_mppt1_overload:
      name: "${name} wfs warning_mppt1_overload"
    #warning_mppt2_overload:
    #  name: "${name} wfs warning_mppt2_overload"
    scc1_battery_too_low_to_charge:
      name: "${name} wfs scc1_battery_too_low_to_charge"
    # scc2_battery_too_low_to_charge:
    #   name: "${name} wfs scc2_battery_too_low_to_charge"

text_sensor:
  - platform: pipsolar
    pipsolar_id: inverter0
    device_mode:
      name: "${name} device_mode"

  - platform: template
    name: "Battery Power Direction"
    lambda: |-
      switch ((int)id(battery_power_direction_sensor).state) {
        case 1: return std::string("Charging");
        case 2: return std::string("Discharging");
        default: return std::string("Idle");
      }
      return std::string("Unknown");
    update_interval: 5s

  - platform: template
    name: "DC/AC Power Direction"
    lambda: |-
      switch ((int)id(battery_power_direction_sensor).state) {
        case 1: return std::string("AC-DC");
        case 2: return std::string("DC-AC");
        default: return std::string("Idle");
      }
      return std::string("Unknown");
    update_interval: 5s


switch:
  - platform: pipsolar
    pipsolar_id: inverter0
    output_source_priority:
      name: "${name} output_source_priority"
    solar_power_priority:
      name: "${name} solar_power_priority"
    charger_source_priority_solarfirst:
      name: "${name} charger_source_priority_solarfirst"
    charger_source_priority_utility:
      name: "${name} charger_source_priority_utility"
    charger_source_priority_solaronly:
      name: "${name} charger_source_priority_solaronly"

    silence_buzzer_open_buzzer:
      name: "${name} sw silence_buzzer_open_buzzer"
    overload_bypass_function:
      name: "${name} sw overload_bypass_function"
    lcd_escape_to_default:
      name: "${name} sw lcd_escape_to_default"
    overload_restart_function:
      name: "${name} sw overload_restart_function"
    over_temperature_restart_function:
      name: "${name} sw over_temperature_restart_function"
    backlight_on:
      name: "${name} sw backlight_on"
    alarm_on_when_primary_source_interrupt:
      name: "${name} sw alarm_on_when_primary_source_interrupt"
    fault_code_record:
      name: "${name} sw fault_code_record"
    power_saving:
      name: "${name} sw power_saving"

output:
  - platform: pipsolar
    pipsolar_id: inverter0
    current_max_ac_charging_current:
      id: inverter0_current_max_ac_charging_current
    current_max_charging_current:
      id: inverter0_current_max_charging_current
    battery_type:
      id: inverter0_battery_type
    battery_recharge_voltage:
      id: inverter0_battery_recharge_voltage
    battery_redischarge_voltage:
      id: inverter0_battery_redischarge_voltage
    battery_under_voltage:
      id: inverter0_battery_under_voltage
    battery_float_voltage:
      id: inverter0_battery_float_voltage
    output_source_priority:
      id: inverter0_output_source_priority
    charger_source_priority:
      id: inverter0_charger_source_priority

number:
  - platform: template
    id: max_ac_charging_current
    name: "Max AC Charging Current"
    device_class: current
    mode: slider
    min_value: 10
    max_value: 70
    step: 10
    lambda: "return id(current_max_ac_charging_current_sensor).state;"
    update_interval: 5s
    set_action:
      then:
        - lambda: "id(inverter0_current_max_ac_charging_current).set_value(x);"

  - platform: template
    id: max_charging_current
    name: "Max Charging Current"
    device_class: current
    mode: slider
    min_value: 10
    max_value: 120
    step: 10
    lambda: "return id(current_max_charging_current_sensor).state;"
    update_interval: 5s
    set_action:
      then:
        - lambda: "id(inverter0_current_max_charging_current).set_value(x);"

  # - platform: template
  #   id: bat_recharge_voltage
  #   name: "On-Grid Charge"
  #   device_class: voltage
  #   mode: slider
  #   min_value: 10
  #   max_value: 120
  #   step: 10
  #   lambda: "return id(current_max_charging_current_sensor).state;"
  #   update_interval: 5s
  #   set_action:
  #     then:
  #       - lambda: "id(inverter0_current_max_charging_current).set_value(x);"
